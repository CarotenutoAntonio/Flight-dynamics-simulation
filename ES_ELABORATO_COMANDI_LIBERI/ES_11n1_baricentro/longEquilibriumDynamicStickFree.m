function dxdt = longEquilibriumDynamicStickFree (t,x)
%Dichiarazioni delle variabili globali
global g ...
    z_0 V_0 q_0 gamma_0...  %condizioni iniziali
    rho_0...                %densitá dell aria Sea Level
myAC... %oggetto my aircraft da file t
v_t_delta_s... %legge dei comandi e vettore tempo da interpolare v_t_delta_T ...
delta_tab_0...
v_t_delta_T
%rinomino le variabili x in ingresso per facilitare le espressioni %-- Vettore di Stato
    V            = x(1);
    alpha        = x(2);
    q            = x(3);
    x_G_E        = x(4);
   z_G_E        = x(5);
   theta        = x(6);
   dot_delta_e  = x(7);
   delta_e      = x(8);
%% check if elevator is acceptable
if (delta_e < myAC.delta_e_min) delta_e = myAC.delta_e_min;
    x(8) = delta_e;
if (dot_delta_e < 0)
        dot_delta_e = 0;
        x(7) = 0;
end 
end
if (delta_e > myAC.delta_e_max)
    delta_e = myAC.delta_e_max;
    x(8) = delta_e;
    if (dot_delta_e > 0)
        dot_delta_e = 0;
        x(7) = 0;
    end
end
gamma = x(6) + myAC.mu_x - x(2); %angolo di rampa
%Richiamo il modello dell’atmosfera
[air_Temp, sound_speed, air_pressure, rho] = atmosisa(-z_G_E); %preallocazione
mu_rel = (myAC.W / g) / (rho_0* myAC.S* myAC.b); %densitá relativa
%interpolazione del vettore dei comandi
delta_s = interp1(v_t_delta_s(:,1),v_t_delta_s(:,2),t); 
delta_T = interp1(v_t_delta_T(:,1),v_t_delta_T(:,2),t);
F1 = g*( ...
(delta_T*myAC.T/myAC.W)*cos(x(2) - myAC.mu_x + myAC.mu_T) ...
-sin(gamma) ...
-((rho_0*x(1)^2)/(2*(myAC.W/myAC.S))) ...
*(myAC.CD_0 + myAC.K*((myAC.CL_alpha*x(2) ...
+ myAC.CL_delta_e*x(8) ...
+ myAC.CL_delta_s*delta_s)^myAC.m)) ... 
);
F2 = ( ...
( 1. - myAC.CL_q*(myAC.mac/myAC.b)/(4*mu_rel) )*x(3) ...
-(delta_T*myAC.T/myAC.W)*(g/x(1))*sin(x(2) - myAC.mu_x + myAC.mu_T) ...
+(g/x(1))*cos(gamma) ...
-(g/x(1))*((rho_0*x(1)^2)/(2*(myAC.W/myAC.S))) ...
*( ...
myAC.CL_alpha*x(2) ...
+ myAC.CL_delta_e*x(8) ...
+ myAC.CL_delta_s*delta_s) ...
)/( 1. + myAC.CL_alpha_dot*(myAC.mac/myAC.b)/(4*mu_rel) );
F3 = ((x(1)^2/myAC.k_y^2)*(myAC.mac/myAC.b)/(2*mu_rel)) ...
    *( ... 
myAC.Cm_0 + myAC.Cm_alpha*x(2) ... 
+ myAC.Cm_delta_s*delta_s ...
+ myAC.Cm_delta_e*x(8) ...
+ (myAC.mac/(2*x(1)))*(myAC.Cm_q*x(3)+ myAC.Cm_alpha_dot*F2) ...
+ (myAC.Cm_T_0 + myAC.Cm_T_alpha*x(2))*delta_T ...
);
F4 = x(1)*cos(gamma) ;
F5 = -x(1)*sin(gamma) ;
F6 = x(3) ;
F7 = (myAC.ec_adim*g*cos(x(6))/myAC.k_e^2) ...
+ (rho_0 * (x(1)^2) * myAC.S_e * myAC.mac_e...
*(1/(2*(myAC.k_e^2) * myAC.mass_e)))...
*(myAC.Ch_e_0 + myAC.Ch_e_delta_e*x(8) + myAC.Ch_e_delta_s*delta_s ...
+ myAC.Ch_e_delta_tab*delta_tab_0 +(myAC.mac_e/(2*x(1)))*myAC.Ch_e_q*x(3)...
+ myAC.Ch_e_alpha*((1-myAC.DepsDalpha)*(x(2)-myAC.mu_x)-myAC.eps_0 ... 
+ myAC.mu_x + delta_s) ...
);
F8 = x(7);
f = [F1;F2;F3;F4;F5;F6;F7;F8];
M=MassStickFree(t,x); nM=inv(M);
dxdt=nM*f;
end

